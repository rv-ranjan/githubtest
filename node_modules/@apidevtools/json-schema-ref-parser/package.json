{
  "_args": [
    [
      {
        "raw": "@apidevtools/json-schema-ref-parser@^9.0.6",
        "scope": "@apidevtools",
        "escapedName": "@apidevtools%2fjson-schema-ref-parser",
        "name": "@apidevtools/json-schema-ref-parser",
        "rawSpec": "^9.0.6",
        "spec": ">=9.0.6 <10.0.0",
        "type": "range"
      },
      "D:\\NodeJs\\node_demo\\node_modules\\@apidevtools\\swagger-parser"
    ]
  ],
  "_from": "@apidevtools/json-schema-ref-parser@>=9.0.6 <10.0.0",
  "_hasShrinkwrap": false,
  "_id": "@apidevtools/json-schema-ref-parser@9.1.2",
  "_inCache": true,
  "_location": "/@apidevtools/json-schema-ref-parser",
  "_nodeVersion": "18.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-schema-ref-parser_9.1.2_1674649480288_0.10427106839404932"
  },
  "_npmUser": {
    "name": "philsturgeon",
    "email": "me@philsturgeon.uk"
  },
  "_npmVersion": "8.19.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@apidevtools/json-schema-ref-parser@^9.0.6",
    "scope": "@apidevtools",
    "escapedName": "@apidevtools%2fjson-schema-ref-parser",
    "name": "@apidevtools/json-schema-ref-parser",
    "rawSpec": "^9.0.6",
    "spec": ">=9.0.6 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@apidevtools/swagger-parser"
  ],
  "_resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
  "_shasum": "8ff5386b365d4c9faa7c8b566ff16a46a577d9b8",
  "_shrinkwrap": null,
  "_spec": "@apidevtools/json-schema-ref-parser@^9.0.6",
  "_where": "D:\\NodeJs\\node_demo\\node_modules\\@apidevtools\\swagger-parser",
  "author": {
    "name": "James Messinger",
    "url": "https://jamesmessinger.com"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/APIDevTools/json-schema-ref-parser/issues"
  },
  "contributors": [
    {
      "name": "Boris Cherny",
      "email": "boris@performancejs.com"
    },
    {
      "name": "Jakub RoÅ¼ek",
      "email": "jakub@stoplight.io"
    }
  ],
  "dependencies": {
    "@jsdevtools/ono": "^7.1.3",
    "@types/json-schema": "^7.0.6",
    "call-me-maybe": "^1.0.1",
    "js-yaml": "^4.1.0"
  },
  "description": "Parse, Resolve, and Dereference JSON Schema $ref pointers",
  "devDependencies": {
    "@babel/polyfill": "^7.12.1",
    "@jsdevtools/eslint-config": "^1.0.7",
    "@jsdevtools/host-environment": "^2.1.2",
    "@jsdevtools/karma-config": "^3.1.7",
    "@types/node": "^14.14.21",
    "chai": "^4.2.0",
    "chai-subset": "^1.6.0",
    "eslint": "^7.18.0",
    "karma": "^5.0.2",
    "karma-cli": "^2.0.0",
    "mocha": "^8.2.1",
    "npm-check": "^5.9.0",
    "nyc": "^15.0.1",
    "semantic-release-plugin-update-version-in-files": "^1.1.0",
    "shx": "^0.3.2",
    "typescript": "^4.0.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-r1w81DpR+KyRWd3f+rk6TNqMgedmAxZP5v5KWlXQWlgMUUtyEJch0DKEci1SorPMiSeM8XPl7MZ3miJ60JIpQg==",
    "shasum": "8ff5386b365d4c9faa7c8b566ff16a46a577d9b8",
    "tarball": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
    "fileCount": 23,
    "unpackedSize": 139513,
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEYCIQChPIF4vcecc0Nnhdc+urLIki/bn1x/F1DTEqmsFlTvdAIhANziiQVo0lLkstL4+NXSQBe7LSB1QDB89Xr4ayYAx2qL"
      }
    ],
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJj0R+IACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqyVA//ardxr3r3PY+mojdoSJpF53VcR4GCuyymqvLJ05F6Ss7Y/8aw\r\nrPauTdvQAiW4sHVVK/3150HWh+EmH0hUShKIihR4agQd/USh32ApUeCOgwaF\r\noKZW2P4UfKraBy4OO2STIWP4DKjG+4eWxkTVoNoGxgXSucUWu+yOHQqcy4pK\r\nO3304oItiYtJN+69qO/8NgkicD5b2GHhY/i2R0n/FyC764Jzc8HuHGOTwTni\r\ncBogSMeeJ1RU+CXgBKqAiOxqdk+eRK/CiOm7+lsdn/aAm0hgILahWAlILCjT\r\nqpfQnG0JEqFDQdjJUXYfaK2hgYjiMidHsrtE6S0tH5cz1HFmFcr6MAjYO8Nl\r\nVemhJzKDXEHWHs9i6sYk0YamfQSpaQip/jOoG5txjhKtApYS5+frlHrt25i6\r\nkCNJ7BFme7Fso0C9VQOYfgsZjNWAahPnU0aP2yJWgtlEDtqRRSlia2XmYy+p\r\nkW1agwQrPRUGeF+ILoxBMtdPbMv8jLl/YFRCf7XojPRXH+lP67A2fSVWnRCk\r\nY/ph9HAP9GO1BBI2dQpVG2SP94nlboufct52m8/PDbCLfbIQv0VoNuesCojQ\r\n1O1j5gTxYqqMlKmwG+eMJ6SSyMNOPrH3TD2y0WXZoboL+9L/KigjLVCOiACA\r\nefWDo4x7Vd3BuF/B6P5pedOkDBkp3zkowEs=\r\n=MMrv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "e8053b5675a085eb3c160165ddb5c6ab7bd8ee51",
  "homepage": "https://apitools.dev/json-schema-ref-parser/",
  "keywords": [
    "json",
    "schema",
    "jsonschema",
    "json-schema",
    "json-pointer",
    "$ref",
    "dereference",
    "resolve"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jamesmessinger",
      "email": "james.messinger@gmail.com"
    },
    {
      "name": "philsturgeon",
      "email": "me@philsturgeon.uk"
    }
  ],
  "name": "@apidevtools/json-schema-ref-parser",
  "optionalDependencies": {},
  "readme": "JSON Schema $Ref Parser\n============================\n#### Parse, Resolve, and Dereference JSON Schema $ref pointers\n\n[![Build Status](https://github.com/APIDevTools/json-schema-ref-parser/workflows/CI-CD/badge.svg?branch=master)](https://github.com/APIDevTools/json-schema-ref-parser/actions)\n[![Coverage Status](https://coveralls.io/repos/github/APIDevTools/json-schema-ref-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/json-schema-ref-parser)\n\n[![npm](https://img.shields.io/npm/v/@apidevtools/json-schema-ref-parser.svg)](https://www.npmjs.com/package/@apidevtools/json-schema-ref-parser)\n[![Dependencies](https://david-dm.org/APIDevTools/json-schema-ref-parser.svg)](https://david-dm.org/APIDevTools/json-schema-ref-parser)\n[![License](https://img.shields.io/npm/l/@apidevtools/json-schema-ref-parser.svg)](LICENSE)\n[![Buy us a tree](https://img.shields.io/badge/Treeware-%F0%9F%8C%B3-lightgreen)](https://plant.treeware.earth/APIDevTools/json-schema-ref-parser)\n\n\n[![OS and Browser Compatibility](https://apitools.dev/img/badges/ci-badges-with-ie.svg)](https://github.com/APIDevTools/json-schema-ref-parser/actions)\n\n\nThe Problem:\n--------------------------\nYou've got a JSON Schema with `$ref` pointers to other files and/or URLs.  Maybe you know all the referenced files ahead of time.  Maybe you don't.  Maybe some are local files, and others are remote URLs.  Maybe they are a mix of JSON and YAML format.  Maybe some of the files contain cross-references to each other.\n\n```javascript\n{\n  \"definitions\": {\n    \"person\": {\n      // references an external file\n      \"$ref\": \"schemas/people/Bruce-Wayne.json\"\n    },\n    \"place\": {\n      // references a sub-schema in an external file\n      \"$ref\": \"schemas/places.yaml#/definitions/Gotham-City\"\n    },\n    \"thing\": {\n      // references a URL\n      \"$ref\": \"http://wayne-enterprises.com/things/batmobile\"\n    },\n    \"color\": {\n      // references a value in an external file via an internal reference\n      \"$ref\": \"#/definitions/thing/properties/colors/black-as-the-night\"\n    }\n  }\n}\n```\n\n\nThe Solution:\n--------------------------\nJSON Schema $Ref Parser is a full [JSON Reference](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03) and [JSON Pointer](https://tools.ietf.org/html/rfc6901) implementation that crawls even the most complex [JSON Schemas](http://json-schema.org/latest/json-schema-core.html) and gives you simple, straightforward JavaScript objects.\n\n- Use **JSON** or **YAML** schemas &mdash; or even a mix of both!\n- Supports `$ref` pointers to external files and URLs, as well as [custom sources](https://apitools.dev/json-schema-ref-parser/docs/plugins/resolvers.html) such as databases\n- Can [bundle](https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#bundlepath-options-callback) multiple files into a single schema that only has _internal_ `$ref` pointers\n- Can [dereference](https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#dereferencepath-options-callback) your schema, producing a plain-old JavaScript object that's easy to work with\n- Supports [circular references](https://apitools.dev/json-schema-ref-parser/docs/#circular-refs), nested references, back-references, and cross-references between files\n- Maintains object reference equality &mdash; `$ref` pointers to the same value always resolve to the same object instance\n- Tested in Node v10, v12, & v14, and all major web browsers on Windows, Mac, and Linux\n\n\nExample\n--------------------------\n\n```javascript\n$RefParser.dereference(mySchema, (err, schema) => {\n  if (err) {\n    console.error(err);\n  }\n  else {\n    // `schema` is just a normal JavaScript object that contains your entire JSON Schema,\n    // including referenced files, combined into a single object\n    console.log(schema.definitions.person.properties.firstName);\n  }\n})\n```\n\nOr use `async`/`await` syntax instead. The following example is the same as above:\n\n```javascript\ntry {\n  let schema = await $RefParser.dereference(mySchema);\n  console.log(schema.definitions.person.properties.firstName);\n}\ncatch(err) {\n  console.error(err);\n}\n```\n\nFor more detailed examples, please see the [API Documentation](https://apitools.dev/json-schema-ref-parser/docs/)\n\n\n\nInstallation\n--------------------------\nInstall using [npm](https://docs.npmjs.com/about-npm/):\n\n```bash\nnpm install @apidevtools/json-schema-ref-parser\n```\n\n\n\nUsage\n--------------------------\nWhen using JSON Schema $Ref Parser in Node.js apps, you'll probably want to use **CommonJS** syntax:\n\n```javascript\nconst $RefParser = require(\"@apidevtools/json-schema-ref-parser\");\n```\n\nWhen using a transpiler such as [Babel](https://babeljs.io/) or [TypeScript](https://www.typescriptlang.org/), or a bundler such as [Webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/), you can use **ECMAScript modules** syntax instead:\n\n```javascript\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\n```\n\n\n\nBrowser support\n--------------------------\nJSON Schema $Ref Parser supports recent versions of every major web browser.  Older browsers may require [Babel](https://babeljs.io/) and/or [polyfills](https://babeljs.io/docs/en/next/babel-polyfill).\n\nTo use JSON Schema $Ref Parser in a browser, you'll need to use a bundling tool such as [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/), [Parcel](https://parceljs.org/), or [Browserify](http://browserify.org/). Some bundlers may require a bit of configuration, such as setting `browser: true` in [rollup-plugin-resolve](https://github.com/rollup/rollup-plugin-node-resolve).\n\n\n\nAPI Documentation\n--------------------------\nFull API documentation is available [right here](https://apitools.dev/json-schema-ref-parser/docs/)\n\n\n\nContributing\n--------------------------\nI welcome any contributions, enhancements, and bug-fixes.  [Open an issue](https://github.com/APIDevTools/json-schema-ref-parser/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/json-schema-ref-parser/pulls).\n\n#### Building/Testing\nTo build/test the project locally on your computer:\n\n1. __Clone this repo__<br>\n`git clone https://github.com/APIDevTools/json-schema-ref-parser.git`\n\n2. __Install dependencies__<br>\n`npm install`\n\n3. __Run the tests__<br>\n`npm test`\n\n\n\nLicense\n--------------------------\nJSON Schema $Ref Parser is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.\n\nThis package is [Treeware](http://treeware.earth). If you use it in production, then we ask that you [**buy the world a tree**](https://plant.treeware.earth/APIDevTools/json-schema-ref-parser) to thank us for our work. By contributing to the Treeware forest youâll be creating employment for local families and restoring wildlife habitats.\n\n\n\nBig Thanks To\n--------------------------\nThanks to these awesome companies for their support of Open Source developers â¤\n\n[![Stoplight](https://svgshare.com/i/TK5.svg)](https://stoplight.io/?utm_source=github&utm_medium=readme&utm_campaign=json_schema_ref_parser)\n[![SauceLabs](https://jstools.dev/img/badges/sauce-labs.svg)](https://saucelabs.com)\n[![Coveralls](https://jstools.dev/img/badges/coveralls.svg)](https://coveralls.io)\n",
  "readmeFilename": "README.md",
  "release": {
    "branches": [
      "main",
      "v9",
      {
        "name": "v9.1.x",
        "range": "9.1.x"
      }
    ],
    "plugins": [
      "@semantic-release/commit-analyzer",
      "@semantic-release/release-notes-generator",
      [
        "semantic-release-plugin-update-version-in-files",
        {
          "files": [
            "dist/package.json"
          ],
          "placeholder": "X.X.X"
        }
      ],
      "@semantic-release/npm",
      "@semantic-release/github"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APIDevTools/json-schema-ref-parser.git"
  },
  "scripts": {
    "build": "cp LICENSE *.md dist",
    "clean": "shx rm -rf .nyc_output coverage",
    "coverage": "npm run coverage:node && npm run coverage:browser",
    "coverage:browser": "npm run test:browser -- --coverage",
    "coverage:node": "nyc node_modules/mocha/bin/mocha",
    "lint": "eslint lib test/fixtures test/specs",
    "test": "npm run test:node && npm run test:typescript && npm run test:browser && npm run lint",
    "test:browser": "karma start --single-run",
    "test:node": "mocha",
    "test:typescript": "tsc --noEmit --strict --lib esnext,dom test/specs/typescript-definition.spec.ts",
    "upgrade": "npm-check -u && npm audit fix"
  },
  "typings": "lib/index.d.ts",
  "version": "9.1.2"
}
